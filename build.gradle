plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "jacoco"
}

group = 'com.dobugs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

configurations {
    asciidoctorExt
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // hibernate-spatial
    implementation 'org.hibernate:hibernate-spatial:6.1.6.Final'

    // lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // rest docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // mysql
    runtimeOnly 'mysql:mysql-connector-java:8.0.28'

    // h2
    runtimeOnly 'com.h2database:h2'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // rest template
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
}

/* RestDocs Start */
ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

bootJar {
    dependsOn asciidoctor

    copy {
        from file ("build/docs/asciidoc")
        into file ("src/main/resources/static/docs")
    }

    copy {
        from file("src/main/resources/static")
        into file("build/resources/main/static")
    }
}
/* RestDocs End */

/* JaCoCo Start */
jacoco {
    toolVersion = "0.8.8"
}

test {
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    reports {
        html.enabled true
        csv.enabled true
        xml.enabled false

        html.destination file("$buildDir/reports/jacoco/html")
        csv.destination file("$buildDir/reports/jacoco/jacoco.csv")
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {

    def exceptions = [
            "*.exception.*",
            "*.dto.*",
            "*.*Application",
            "*.*Connector.*",
            "*.*Connector",
            "*.*Generator.*",
            "*.*Generator",
            "*.logging.*",
            "*.test.*"
    ]

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }

            excludes = [] + exceptions
        }
    }
}
/* JaCoCo End */
